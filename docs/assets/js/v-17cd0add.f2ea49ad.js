(self.webpackChunkSugar_NetCore_Documents=self.webpackChunkSugar_NetCore_Documents||[]).push([[118],{1365:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-17cd0add",path:"/zh/api/extends.html",title:"扩展成员",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"DateTime",slug:"datetime",children:[]},{level:2,title:"Enum",slug:"enum",children:[]},{level:2,title:"String",slug:"string",children:[]}],filePathRelative:"zh/api/extends.md",git:{}}},9057:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var p=a(6252);const e=(0,p.Wm)("h1",{id:"扩展成员",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#扩展成员","aria-hidden":"true"},"#"),(0,p.Uk)(" 扩展成员")],-1),t=(0,p.Uk)("本节内容介绍组件库针对.NET内置对象的扩展函数。阅读前，建议先阅读"),c={href:"/zh/guide/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("指南"),l=(0,p.Uk)("。"),u=(0,p.uE)('<h2 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> DateTime</h2><p>System.DateTime 扩展函数</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> datetime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>\n    <span class="token comment">//返回类型为long的时间戳</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> timestamp1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span><span class="token function">ToUtcTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//返回类型为long的时间戳（13位，精确到毫秒） TimeStampUnit:组件库内置枚举</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> timestamp2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span><span class="token function">ToUtcTimeStamp</span><span class="token punctuation">(</span>TimeStampUnit<span class="token punctuation">.</span>MilliSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h2><p>System.Enum 扩展函数</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//将Enum转为Int32</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> number <span class="token operator">=</span> TimeStampUnit<span class="token punctuation">.</span>Second<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取Enum描述（System.ComponentModel.Description），没有描述会返回空字符串</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> description <span class="token operator">=</span> TimeStampUnit<span class="token punctuation">.</span>Second<span class="token punctuation">.</span><span class="token function">GetDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p>System.String 扩展函数</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token string">&quot;sugar.net&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">//将当字符串为null时，转为string.Empty</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> empty <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToEmptyIfNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//将当字符串为string.Empty时，转为null</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> nullValue <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToNullIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//判断字符是否为空</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> isnull <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//判断字符串是否存在任何值</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> hasAnyValue <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">HasAnyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//替换首个字符</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> first <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ReplaceFirst</span><span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//替换结尾字符</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> last <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ReplaceLast</span><span class="token punctuation">(</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',9),i={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)("a",c,[o,(0,p.Wm)(a)]),l]),u],64)}}}}]);